import random
import string

from app import db
from app.models import Urls
from flask import request
from urllib.request import HTTPError
from urllib.request import Request
from urllib.request import urlopen


def random_string_generator(size):
    # This function generates random string. It takes an integer as parameter,
    # worked as size of string generated by the function.

    random_string = ''.join(random.choice(
        string.ascii_letters + string.digits) for x in range(size))
    return random_string


def url_checker(long_url):
    # This function checks URL whether it's a valid URL or not. It sends a
    # request to the URL with a defined Header. If the URL response code is
    # below 400, something like 200, 301 etc then it's valid. Otherwise, the
    # URL is said to be dead.

    try:
        request = Request(long_url, None, {
                          'User-agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5'})
        code = urlopen(request).code
        if (code < 400):
            return True
        else:
            return False
    except HTTPError:
        # We are handling HTTPError here. If HTTPError is raised, then the URL
        # is dead.
        return False
    else:
        return False


def short_url_generator(long_url):
    # This is the most important function. Actually it is the main fucntion
    # which is doing everything. It taked the URL as parameter. Then it checks
    # whether the URL is already in database or not. If yes, then it returns
    # the stored short URL. Otherwise, it makes a 6 size string using
    # random_string_generator() function. Then it checks whether the string is
    # already in database or not. If not, then he function returns a short URL
    # appending it to the root URL. Otherwise, it increases the size adding 1
    # and do the previous job until a unique string is got. After that, the
    # function returns a short URL appending it to the root URL.

    lurl_query = Urls.query.filter_by(long_url=long_url).first()
    if lurl_query is None:
        for x in range(6, 11):
            short_url = random_string_generator(x)
            surl_query = Urls.query.filter_by(short_url=short_url).first()
            if surl_query is None:
                data = Urls(short_url, long_url)
                db.session.add(data)
                db.session.commit()
                return request.url_root + short_url
    else:
        return request.url_root + lurl_query.short_url


def number_of_generated_short_url():
    # This function counts how many short URL is stored in the database at a
    # moment.

    number = Urls.query.count()
    return number
